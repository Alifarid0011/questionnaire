// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/Alifarid0011/questionnaire-back-end/internal/controller"
	"github.com/Alifarid0011/questionnaire-back-end/internal/repository"
	"github.com/Alifarid0011/questionnaire-back-end/internal/service"
	"github.com/Alifarid0011/questionnaire-back-end/utils"
	"github.com/Alifarid0011/questionnaire-back-end/wire/provider"
	"github.com/casbin/casbin/v2"
	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/mongo"
)

// Injectors from wire.go:

// InitializeApp initializes the application with all its dependencies.
func InitializeApp(secret string) (*App, error) {
	jwtToken := provider.JWT(secret)
	client := provider.MongoClient()
	database := provider.Database(client)
	blackListTokenRepository := provider.BlackListRepository(database)
	engine := provider.RouterEngine()
	routeController := provider.RouterController(engine)
	userRepository := provider.UserRepository(database)
	refreshTokenRepository := provider.RefreshTokenRepository(database)
	enforcer := provider.CasbinEnforcer(client)
	casbinRepository := provider.CasbinRepository(enforcer, client)
	authService := provider.AuthService(userRepository, refreshTokenRepository, jwtToken, blackListTokenRepository, casbinRepository)
	userService := provider.UserService(userRepository, casbinRepository)
	authController := provider.AuthController(authService, userService)
	casbinService := provider.CasbinService(casbinRepository)
	casbinController := provider.CasbinController(casbinService)
	userController := provider.UserController(userService, casbinService)
	quizRepository := provider.QuizRepository(database)
	quizService := provider.QuizService(quizRepository)
	quizController := provider.QuizController(quizService)
	app := &App{
		TokenManager:     jwtToken,
		BlackListRepo:    blackListTokenRepository,
		RouterCtr:        routeController,
		AuthCtrl:         authController,
		RefreshTokenRepo: refreshTokenRepository,
		Enforcer:         enforcer,
		Mongo:            client,
		Engine:           engine,
		CasbinRepo:       casbinRepository,
		CasbinCtrl:       casbinController,
		CasbinService:    casbinService,
		UserCtrl:         userController,
		UserService:      userService,
		UserRepo:         userRepository,
		QuizCtrl:         quizController,
		QuizService:      quizService,
		QuizRepo:         quizRepository,
	}
	return app, nil
}

// wire.go:

type App struct {
	// Core Components
	TokenManager  utils.JwtToken
	BlackListRepo repository.BlackListTokenRepository
	RouterCtr     controller.RouteController
	// Auth
	AuthCtrl         controller.AuthController
	RefreshTokenRepo repository.RefreshTokenRepository
	Enforcer         *casbin.Enforcer
	Mongo            *mongo.Client
	Engine           *gin.Engine
	// Casbin/ACL
	CasbinRepo    repository.CasbinRepository
	CasbinCtrl    controller.CasbinController
	CasbinService service.CasbinService
	// User
	UserCtrl    controller.UserController
	UserService service.UserService
	UserRepo    repository.UserRepository
	//Quiz
	QuizCtrl    controller.QuizController
	QuizService service.QuizService
	QuizRepo    repository.QuizRepository
}

// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/Alifarid0011/questionnaire-back-end/internal/controller"
	"github.com/Alifarid0011/questionnaire-back-end/internal/repository"
	"github.com/Alifarid0011/questionnaire-back-end/internal/service"
	"github.com/Alifarid0011/questionnaire-back-end/wire/provider"
	"github.com/casbin/casbin/v2"
	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/mongo"
)

// Injectors from wire.go:

// InitializeApp initializes the application with all its dependencies.
func InitializeApp() (*App, error) {
	client := provider.MongoClient()
	enforcer := provider.CasbinEnforcer(client)
	engine := provider.RouterEngine()
	casbinRepository := provider.CasbinRepository(enforcer, client)
	casbinService := provider.CasbinService(casbinRepository)
	casbinController := provider.CasbinController(casbinService)
	database := provider.Database(client)
	userRepository := provider.UserRepository(database)
	userService := provider.UserService(userRepository, casbinRepository)
	userController := provider.UserController(userService, casbinService)
	app := &App{
		Enforcer:      enforcer,
		Mongo:         client,
		Engine:        engine,
		CasbinRepo:    casbinRepository,
		CasbinCtrl:    casbinController,
		CasbinService: casbinService,
		UserCtrl:      userController,
		UserService:   userService,
		UserRepo:      userRepository,
	}
	return app, nil
}

// wire.go:

type App struct {
	Enforcer *casbin.Enforcer
	Mongo    *mongo.Client
	Engine   *gin.Engine
	// Casbin/ACL
	CasbinRepo    repository.CasbinRepository
	CasbinCtrl    controller.CasbinController
	CasbinService service.CasbinService
	// User
	UserCtrl    controller.UserController
	UserService service.UserService
	UserRepo    repository.UserRepository
}

definitions:
  dto.AnswerDTO:
    properties:
      question_id:
        type: string
      response:
        items:
          type: string
        type: array
    required:
    - question_id
    - response
    type: object
  dto.CheckPermissionDTO:
    properties:
      act:
        description: GET, POST, PUT, DELETE
        type: string
      allow_or_deny:
        enum:
        - allow
        - deny
        type: string
      obj:
        description: /user/all or /user/:id
        type: string
      sub:
        description: role or user_uid
        type: string
    required:
    - act
    - allow_or_deny
    - obj
    - sub
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      full_name:
        maxLength: 100
        type: string
      mobile:
        type: string
      national_code:
        type: string
      password:
        maxLength: 100
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - mobile
    - password
    - username
    type: object
  dto.GroupingDTO:
    properties:
      child:
        type: string
      parent:
        type: string
    required:
    - child
    - parent
    type: object
  dto.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.QuestionDTO:
    properties:
      correct_answer:
        items:
          type: string
        type: array
      id:
        type: string
      key_words:
        items:
          type: string
        type: array
      label:
        type: string
      options:
        items:
          type: string
        type: array
      type:
        enum:
        - short
        - checkbox
        - radio
        type: string
    required:
    - id
    - label
    - type
    type: object
  dto.QuestionRatingDTO:
    properties:
      created_at:
        description: Timestamp of creation
        type: string
      id:
        description: Unique identifier of the rating
        type: string
      question_id:
        description: ID of the question being rated
        type: string
      score:
        description: Rating score from 1 to 5
        type: integer
      updated_at:
        description: Timestamp of last update
        type: string
      user_id:
        description: ID of the user who rated the question
        type: string
    type: object
  dto.QuizDTO:
    properties:
      category:
        type: string
      created_at:
        type: string
      level:
        type: string
      questions:
        items:
          $ref: '#/definitions/dto.QuestionDTO'
        type: array
      title:
        type: string
      user_id:
        type: string
    required:
    - category
    - level
    - questions
    - title
    - user_id
    type: object
  dto.RefreshRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.UpdateQuestionRatingDTO:
    properties:
      id:
        description: Unique identifier of the rating
        type: string
      score:
        description: Optional new score to update
        type: integer
    type: object
  dto.UpdateQuizDTO:
    properties:
      category:
        type: string
      id:
        type: string
      level:
        type: string
      questions:
        items:
          $ref: '#/definitions/dto.QuestionDTO'
        type: array
      title:
        type: string
    required:
    - id
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
    type: object
  dto.UserAnswerDTO:
    properties:
      answers:
        items:
          $ref: '#/definitions/dto.AnswerDTO'
        type: array
      quiz_id:
        type: string
      user_id:
        type: string
    required:
    - answers
    - quiz_id
    - user_id
    type: object
  dto.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      mobile:
        type: string
      national_code:
        type: string
      uid:
        type: string
      username:
        type: string
    type: object
  models.Answer:
    properties:
      comment:
        type: string
      is_correct:
        type: boolean
      question_id:
        type: string
      response:
        description: 'generic: short answer = [text], radio = [choice], checkbox =
          [choices]'
        items:
          type: string
        type: array
      score:
        type: number
    type: object
  models.Comment:
    properties:
      created_at:
        type: string
      id:
        type: string
      parent_id:
        type: string
      target:
        allOf:
        - $ref: '#/definitions/models.DBRef'
        description: polymorphic reference
      text:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  models.DBRef:
    properties:
      $db:
        description: Optional DB name
        type: string
      $id:
        description: Document ID
        type: string
      $ref:
        description: Collection name
        type: string
    required:
    - $id
    - $ref
    type: object
  models.UserAnswer:
    properties:
      answers:
        items:
          $ref: '#/definitions/models.Answer'
        type: array
      appeal:
        type: boolean
      created_at:
        type: string
      id:
        type: string
      quiz_id:
        type: string
      score:
        type: number
      user_id:
        type: string
    type: object
  response.Meta:
    properties:
      code:
        type: integer
      extra:
        additionalProperties: true
        description: For additional metadata
        type: object
      message:
        type: string
      message_id:
        description: For i18n
        type: string
      pagination: {}
      success:
        type: boolean
      trace_id:
        type: string
    type: object
  response.Response:
    properties:
      data: {}
      errors: {}
      meta:
        $ref: '#/definitions/response.Meta'
    type: object
info:
  contact: {}
  description: This is a sample API for demonstrating Swagger with Bearer Authentication
    in Go using Gin
  title: Swagger Example API
  version: "1.0"
paths:
  /acl/check:
    get:
      consumes:
      - application/json
      description: Checks whether the user is allowed to perform a specific action
        on a resource.
      parameters:
      - description: Permission check information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CheckPermissionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Check Permission
      tags:
      - ACL
  /acl/permissions:
    get:
      consumes:
      - application/json
      description: Retrieves all policies (p) and grouping policies (g, g2) stored
        in Casbin.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Get All Casbin Data
      tags:
      - ACL
  /acl/policies:
    delete:
      consumes:
      - application/json
      description: Removes the specified permission policy for the user/group.
      parameters:
      - description: Policy information for removal
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CheckPermissionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Remove Policy
      tags:
      - ACL
    post:
      consumes:
      - application/json
      description: Adds a policy for a user/group to perform an action on a resource.
      parameters:
      - description: Policy information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CheckPermissionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Add Policy
      tags:
      - ACL
  /acl/policies/{sub}/permissions:
    get:
      consumes:
      - application/json
      description: Retrieves hierarchical permissions based on user ID or role (subject).
      parameters:
      - description: User ID or Role (subject)
        in: path
        name: sub
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Get Subject Permission Tree
      tags:
      - ACL
  /acl/policy_group:
    delete:
      consumes:
      - application/json
      description: Removes the link between one role/group and another role/group.
      parameters:
      - description: Grouping information for removal
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GroupingDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Remove Grouping Policy (g)
      tags:
      - ACL
    post:
      consumes:
      - application/json
      description: Assigns one role or group to another role/group (g grouping).
      parameters:
      - description: Grouping information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GroupingDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Add Grouping Policy (g)
      tags:
      - ACL
  /acl/roles:
    get:
      consumes:
      - application/json
      description: This endpoint returns all roles defined as v0 in policies (excluding
        those that are ObjectID).
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Get Roles List
      tags:
      - ACL
  /acl/user_roles:
    get:
      consumes:
      - application/json
      description: Retrieves all roles assigned to the given user ID.
      parameters:
      - description: user_uid
        example: 64b2fa75e7d1f4a739fa2a11
        in: query
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Get User Roles
      tags:
      - ACL
  /auth/login:
    post:
      consumes:
      - application/json
      description: Takes username and password, returns access and refresh token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Authenticate user
      tags:
      - Auth
  /auth/logout:
    get:
      consumes:
      - application/json
      description: Logs out the user and invalidates the refresh token based on user-agent
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Logout and invalidate refresh token
      tags:
      - Auth
  /auth/refresh_token:
    post:
      consumes:
      - application/json
      description: Uses a refresh token and user-agent info to generate a new access
        token
      parameters:
      - description: Refresh token payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Use refresh token to get new access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: register user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register  user Registration
      tags:
      - Auth
  /comments:
    post:
      consumes:
      - application/json
      description: Adds a new comment to a target
      parameters:
      - description: Comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new comment
      tags:
      - Comments
    put:
      consumes:
      - application/json
      description: Updates an existing comment by ID
      parameters:
      - description: Updated comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update a comment
      tags:
      - Comments
  /comments/{id}:
    get:
      description: Returns a comment by its ID
      parameters:
      - description: Comment ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get comment by ID
      tags:
      - Comments
  /comments/{parent_id}/replies:
    get:
      description: Returns all replies for a given parent comment
      parameters:
      - description: Parent comment ID
        in: path
        name: parent_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get replies for a comment
      tags:
      - Comments
  /comments/target:
    get:
      description: Returns all comments for a polymorphic target
      parameters:
      - description: Target collection
        in: query
        name: ref
        required: true
        type: string
      - description: Target document ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get comments by target
      tags:
      - Comments
  /comments/user/{user_id}:
    get:
      description: Returns all comments created by a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get comments by user
      tags:
      - Comments
  /grading/user-answer/{id}:
    post:
      consumes:
      - application/json
      description: Grade all questions in a user answer using automatic grading
      parameters:
      - description: User Answer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.UserAnswer'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Automatically grade a user answer
      tags:
      - Grading
  /grading/user-answer/{id}/appeal:
    post:
      consumes:
      - application/json
      description: Allows a user to mark their answer as appealed for manual review
      parameters:
      - description: User Answer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  additionalProperties:
                    type: boolean
                  type: object
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Set appeal flag for a user answer
      tags:
      - Grading
  /grading/user-answer/{id}/manual:
    post:
      consumes:
      - application/json
      description: Allows a grader to manually change the score of a single question
      parameters:
      - description: User Answer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.UserAnswer'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Override score for a specific question
      tags:
      - Grading
  /quizzes:
    get:
      description: Returns all quizzes
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all quizzes
      tags:
      - quizzes
    post:
      consumes:
      - application/json
      description: Creates a new quiz with questions
      parameters:
      - description: Quiz data
        in: body
        name: quiz
        required: true
        schema:
          $ref: '#/definitions/dto.QuizDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new quiz
      tags:
      - quizzes
    put:
      consumes:
      - application/json
      description: Updates quiz details by ID
      parameters:
      - description: Updated quiz data
        in: body
        name: quiz
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateQuizDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update an existing quiz
      tags:
      - quizzes
  /quizzes/{id}:
    delete:
      description: Deletes a quiz by ID
      parameters:
      - description: Quiz ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Delete a quiz
      tags:
      - quizzes
    get:
      description: Returns a single quiz by ID
      parameters:
      - description: Quiz ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get quiz by ID
      tags:
      - quizzes
  /quizzes/categories:
    get:
      description: Returns all available quiz categories
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get quiz categories
      tags:
      - quizzes
  /quizzes/categories/count:
    get:
      description: Returns number of quizzes in each category
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get quiz count by category
      tags:
      - quizzes
  /quizzes/category:
    get:
      description: Returns all quizzes for a given category
      parameters:
      - description: Category name
        in: query
        name: category
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get quizzes by category
      tags:
      - quizzes
  /ratings:
    post:
      consumes:
      - application/json
      description: Allows a user to rate a question from 1 to 5
      parameters:
      - description: Question Rating
        in: body
        name: rating
        required: true
        schema:
          $ref: '#/definitions/dto.QuestionRatingDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.QuestionRatingDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new question rating
      tags:
      - QuestionRatings
    put:
      consumes:
      - application/json
      description: Update the score of a previously submitted rating
      parameters:
      - description: Update Question Rating
        in: body
        name: rating
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateQuestionRatingDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.QuestionRatingDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Update an existing question rating
      tags:
      - QuestionRatings
  /ratings/{id}:
    get:
      description: Retrieve a specific rating by its ID
      parameters:
      - description: Rating ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.QuestionRatingDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get a question rating by ID
      tags:
      - QuestionRatings
  /ratings/question/{question_id}:
    get:
      description: Retrieve all ratings submitted for a specific question
      parameters:
      - description: Question ID
        in: path
        name: question_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.QuestionRatingDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all ratings for a question
      tags:
      - QuestionRatings
  /ratings/question/{question_id}/user/{user_id}:
    get:
      description: Retrieve the rating submitted by a specific user for a specific
        question
      parameters:
      - description: Question ID
        in: path
        name: question_id
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.QuestionRatingDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get a user's rating for a specific question
      tags:
      - QuestionRatings
  /ratings/user/{user_id}:
    get:
      description: Retrieve all question ratings submitted by a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.QuestionRatingDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all ratings by a user
      tags:
      - QuestionRatings
  /routes/list:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      tags:
      - Route
  /user-answers:
    post:
      consumes:
      - application/json
      description: Create and store a user answer for a quiz
      parameters:
      - description: User Answer DTO
        in: body
        name: userAnswer
        required: true
        schema:
          $ref: '#/definitions/dto.UserAnswerDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserAnswerDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      summary: Create a new user answer
      tags:
      - UserAnswers
  /user-answers/{id}:
    get:
      description: Retrieve a user answer using its ID
      parameters:
      - description: User Answer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserAnswerDTO'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get user answer by ID
      tags:
      - UserAnswers
  /user-answers/quiz/{quiz_id}:
    get:
      description: Retrieve all user answers for a specific quiz
      parameters:
      - description: Quiz ID
        in: path
        name: quiz_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.UserAnswerDTO'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all user answers for a quiz
      tags:
      - UserAnswers
  /user-answers/quiz/{quiz_id}/user/{user_id}:
    get:
      description: Retrieve answers submitted by a specific user for a specific quiz
      parameters:
      - description: Quiz ID
        in: path
        name: quiz_id
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.UserAnswerDTO'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get user answers for a quiz and user
      tags:
      - UserAnswers
  /user-answers/user/{user_id}:
    get:
      description: Retrieve all user answers submitted by a specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.UserAnswerDTO'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/response.Response'
      summary: Get all user answers for a user
      tags:
      - UserAnswers
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all users
      parameters:
      - default: page
        description: 'Pagination type: ''page'' or ''cursor'''
        enum:
        - page
        - cursor
        in: query
        name: type
        type: string
      - description: Page number (used with type=page)
        in: query
        name: page
        type: integer
      - description: Items per page (1 to 100)
        in: query
        name: per_page
        type: integer
      - description: Last seen ID (used with type=cursor)
        in: query
        name: last_seen_id
        type: string
      - description: 'Sort order: true=ASC, false=DESC'
        in: query
        name: asc
        type: boolean
      - default: _id
        description: Field to sort by
        in: query
        name: sort_field
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Register a new user in the system
      parameters:
      - description: User data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
      security:
      - AuthBearer: []
      summary: Create a new user
      tags:
      - users
  /users/{uid}:
    delete:
      description: Delete user by UID (admin only)
      parameters:
      - description: User UID
        in: path
        name: uid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Delete a user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user details by UID (admin or self)
      parameters:
      - description: User UID
        in: path
        name: uid
        required: true
        type: string
      - description: User update data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
      security:
      - AuthBearer: []
      summary: Update a user
      tags:
      - users
  /users/me:
    get:
      description: Get authenticated user information from token
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
      security:
      - AuthBearer: []
      summary: Get current user info
      tags:
      - users
  /users/uid/{uid}:
    get:
      description: Get a user by their UID
      parameters:
      - description: User UID
        in: path
        name: uid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Find user by UID
      tags:
      - users
  /users/username/{username}:
    get:
      description: Get a user object by username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Find user by username
      tags:
      - users
securityDefinitions:
  AuthBearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"

definitions:
  dto.CheckPermissionDTO:
    properties:
      act:
        description: GET, POST, PUT, DELETE
        type: string
      allow_or_deny:
        enum:
        - allow
        - deny
        type: string
      obj:
        description: /user/all or /user/:id
        type: string
      sub:
        description: role or user_uid
        type: string
    required:
    - act
    - allow_or_deny
    - obj
    - sub
    type: object
  dto.CreateUserRequest:
    properties:
      email:
        type: string
      full_name:
        maxLength: 100
        type: string
      mobile:
        type: string
      national_code:
        type: string
      password:
        maxLength: 100
        minLength: 6
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - mobile
    - password
    - username
    type: object
  dto.GroupingDTO:
    properties:
      child:
        type: string
      parent:
        type: string
    required:
    - child
    - parent
    type: object
  dto.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.RefreshRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.UpdateUserRequest:
    properties:
      email:
        type: string
      full_name:
        type: string
    type: object
  dto.UserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name:
        type: string
      mobile:
        type: string
      national_code:
        type: string
      uid:
        type: string
      username:
        type: string
    type: object
  response.Meta:
    properties:
      code:
        type: integer
      extra:
        additionalProperties: true
        description: For additional metadata
        type: object
      message:
        type: string
      message_id:
        description: For i18n
        type: string
      pagination: {}
      success:
        type: boolean
      trace_id:
        type: string
    type: object
  response.Response:
    properties:
      data: {}
      errors: {}
      meta:
        $ref: '#/definitions/response.Meta'
    type: object
info:
  contact: {}
  description: This is a sample API for demonstrating Swagger with Bearer Authentication
    in Go using Gin
  title: Swagger Example API
  version: "1.0"
paths:
  /acl/check:
    get:
      consumes:
      - application/json
      description: Checks whether the user is allowed to perform a specific action
        on a resource.
      parameters:
      - description: Permission check information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CheckPermissionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Check Permission
      tags:
      - ACL
  /acl/permissions:
    get:
      consumes:
      - application/json
      description: Retrieves all policies (p) and grouping policies (g, g2) stored
        in Casbin.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Get All Casbin Data
      tags:
      - ACL
  /acl/policies:
    delete:
      consumes:
      - application/json
      description: Removes the specified permission policy for the user/group.
      parameters:
      - description: Policy information for removal
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CheckPermissionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Remove Policy
      tags:
      - ACL
    post:
      consumes:
      - application/json
      description: Adds a policy for a user/group to perform an action on a resource.
      parameters:
      - description: Policy information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CheckPermissionDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Add Policy
      tags:
      - ACL
  /acl/policies/{sub}/permissions:
    get:
      consumes:
      - application/json
      description: Retrieves hierarchical permissions based on user ID or role (subject).
      parameters:
      - description: User ID or Role (subject)
        in: path
        name: sub
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Get Subject Permission Tree
      tags:
      - ACL
  /acl/policy_group:
    delete:
      consumes:
      - application/json
      description: Removes the link between one role/group and another role/group.
      parameters:
      - description: Grouping information for removal
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GroupingDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Remove Grouping Policy (g)
      tags:
      - ACL
    post:
      consumes:
      - application/json
      description: Assigns one role or group to another role/group (g grouping).
      parameters:
      - description: Grouping information
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.GroupingDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Add Grouping Policy (g)
      tags:
      - ACL
  /acl/roles:
    get:
      consumes:
      - application/json
      description: This endpoint returns all roles defined as v0 in policies (excluding
        those that are ObjectID).
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Get Roles List
      tags:
      - ACL
  /acl/user_roles:
    get:
      consumes:
      - application/json
      description: Retrieves all roles assigned to the given user ID.
      parameters:
      - description: user_uid
        example: 64b2fa75e7d1f4a739fa2a11
        in: query
        name: uid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Get User Roles
      tags:
      - ACL
  /auth/login:
    post:
      consumes:
      - application/json
      description: Takes username and password, returns access and refresh token
      parameters:
      - description: Login credentials
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Authenticate user
      tags:
      - Auth
  /auth/logout:
    get:
      consumes:
      - application/json
      description: Logs out the user and invalidates the refresh token based on user-agent
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Logout and invalidate refresh token
      tags:
      - Auth
  /auth/refresh_token:
    post:
      consumes:
      - application/json
      description: Uses a refresh token and user-agent info to generate a new access
        token
      parameters:
      - description: Refresh token payload
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Use refresh token to get new access token
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      parameters:
      - description: register user
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      summary: Register  user Registration
      tags:
      - Auth
  /routes/list:
    get:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Response'
      tags:
      - Route
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all users
      parameters:
      - default: page
        description: 'Pagination type: ''page'' or ''cursor'''
        enum:
        - page
        - cursor
        in: query
        name: type
        type: string
      - description: Page number (used with type=page)
        in: query
        name: page
        type: integer
      - description: Items per page (1 to 100)
        in: query
        name: per_page
        type: integer
      - description: Last seen ID (used with type=cursor)
        in: query
        name: last_seen_id
        type: string
      - description: 'Sort order: true=ASC, false=DESC'
        in: query
        name: asc
        type: boolean
      - default: _id
        description: Field to sort by
        in: query
        name: sort_field
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Register a new user in the system
      parameters:
      - description: User data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
      security:
      - AuthBearer: []
      summary: Create a new user
      tags:
      - users
  /users/{uid}:
    delete:
      description: Delete user by UID (admin only)
      parameters:
      - description: User UID
        in: path
        name: uid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Delete a user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user details by UID (admin or self)
      parameters:
      - description: User UID
        in: path
        name: uid
        required: true
        type: string
      - description: User update data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
      security:
      - AuthBearer: []
      summary: Update a user
      tags:
      - users
  /users/me:
    get:
      description: Get authenticated user information from token
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
      security:
      - AuthBearer: []
      summary: Get current user info
      tags:
      - users
  /users/uid/{uid}:
    get:
      description: Get a user by their UID
      parameters:
      - description: User UID
        in: path
        name: uid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Find user by UID
      tags:
      - users
  /users/username/{username}:
    get:
      description: Get a user object by username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - AuthBearer: []
      summary: Find user by username
      tags:
      - users
securityDefinitions:
  AuthBearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
